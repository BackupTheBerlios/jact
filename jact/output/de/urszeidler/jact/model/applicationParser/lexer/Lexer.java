/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.urszeidler.jact.model.applicationParser.lexer;

import java.io.*;
import java.util.*;
import de.urszeidler.jact.model.applicationParser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TUrl(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TDialstr(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new4(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new5(String text, int line, int pos) { return new TStringLit(text, line, pos); }
    Token new6(int line, int pos) { return new TRPar(line, pos); }
    Token new7(int line, int pos) { return new TLPar(line, pos); }
    Token new8(int line, int pos) { return new TROp(line, pos); }
    Token new9(int line, int pos) { return new TLOp(line, pos); }
    Token new10(int line, int pos) { return new TStsep(line, pos); }
    Token new11(int line, int pos) { return new TComma(line, pos); }
    Token new12(int line, int pos) { return new TDoublep(line, pos); }
    Token new13(String text, int line, int pos) { return new TSep(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {32, 32, 2}, {34, 34, 3}, {35, 35, 4}, {36, 36, 5}, {38, 38, 6}, {39, 39, 7}, {40, 40, 8}, {41, 41, 9}, {44, 44, 10}, {45, 45, 5}, {48, 57, 4}, {58, 58, 11}, {61, 61, 12}, {63, 63, 13}, {65, 90, 5}, {91, 91, 14}, {92, 92, 15}, {93, 93, 16}, {97, 123, 5}, {124, 124, 17}, {125, 125, 5}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{34, 34, 18}, {35, 35, 19}, {36, 36, 20}, {39, 39, 21}, {45, 45, 20}, {46, 46, 22}, {48, 57, 19}, {64, 64, 23}, {65, 90, 20}, {97, 123, 20}, {125, 125, 20}, },
            {{35, 35, 4}, {48, 57, 4}, },
            {{35, 35, 24}, {36, 36, 25}, {45, 45, 25}, {46, 46, 26}, {47, 47, 27}, {48, 57, 24}, {58, 58, 28}, {64, 64, 29}, {65, 90, 25}, {97, 123, 25}, {125, 125, 25}, },
            {},
            {{34, 125, -5}, },
            {},
            {},
            {},
            {{47, 47, 30}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{34, 125, -5}, },
            {{34, 125, -5}, },
            {},
            {{34, 125, -5}, },
            {{34, 125, -5}, },
            {{35, 35, 24}, {36, 36, 31}, {45, 45, 31}, {46, 57, -7}, {64, 64, 29}, {65, 90, 31}, {97, 123, 31}, {125, 125, 31}, },
            {{35, 125, -7}, },
            {{35, 35, 32}, {36, 36, 33}, {45, 45, 33}, {46, 46, 26}, {48, 57, 32}, {64, 64, 29}, {65, 90, 33}, {97, 123, 33}, {125, 125, 33}, },
            {{35, 35, 34}, {36, 36, 35}, {45, 45, 35}, {48, 57, 34}, {65, 90, 35}, {97, 123, 35}, {125, 125, 35}, },
            {{47, 47, 30}, },
            {{35, 125, -28}, },
            {{47, 47, 36}, },
            {{35, 125, -26}, },
            {{35, 125, -28}, },
            {{35, 125, -28}, },
            {{35, 35, 37}, {36, 36, 38}, {45, 45, 38}, {46, 46, 39}, {47, 47, 40}, {48, 57, 37}, {64, 64, 41}, {65, 90, 38}, {97, 123, 38}, {125, 125, 38}, },
            {{35, 125, -36}, },
            {{35, 35, 42}, {36, 36, 43}, {45, 45, 43}, {48, 57, 42}, {65, 90, 43}, {97, 123, 43}, {125, 125, 43}, },
            {{35, 125, -36}, },
            {{35, 125, -36}, },
            {{35, 125, -36}, },
            {{35, 125, -36}, },
            {{35, 125, -36}, },
            {{35, 35, 44}, {36, 36, 45}, {45, 45, 45}, {46, 46, 46}, {47, 47, 47}, {48, 57, 44}, {64, 64, 48}, {65, 90, 45}, {97, 123, 45}, {125, 125, 45}, },
            {{35, 125, -44}, },
            {{35, 125, -44}, },
            {{35, 125, -44}, },
            {{35, 125, -44}, },
            {{35, 125, -44}, },
            {{35, 125, -44}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, -1, 4, 3, 13, 10, 7, 6, 11, 12, 13, 13, 9, 13, 8, 13, 5, -1, -1, 5, -1, -1, 3, 3, 3, -1, -1, 3, -1, 3, 3, 3, 2, 2, -1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
