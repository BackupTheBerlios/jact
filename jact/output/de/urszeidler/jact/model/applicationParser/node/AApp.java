/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.urszeidler.jact.model.applicationParser.node;

import java.util.*;
import de.urszeidler.jact.model.applicationParser.analysis.*;

public final class AApp extends PApp
{
    private TIdentifier _identifier_;
    private PParalist _paralist_;

    public AApp()
    {
    }

    public AApp(
        TIdentifier _identifier_,
        PParalist _paralist_)
    {
        setIdentifier(_identifier_);

        setParalist(_paralist_);

    }
    public Object clone()
    {
        return new AApp(
            (TIdentifier) cloneNode(_identifier_),
            (PParalist) cloneNode(_paralist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAApp(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PParalist getParalist()
    {
        return _paralist_;
    }

    public void setParalist(PParalist node)
    {
        if(_paralist_ != null)
        {
            _paralist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _paralist_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_paralist_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_paralist_ == child)
        {
            _paralist_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_paralist_ == oldChild)
        {
            setParalist((PParalist) newChild);
            return;
        }

    }
}
