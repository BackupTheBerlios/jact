/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.urszeidler.jact.model.applicationParser.analysis;

import de.urszeidler.jact.model.applicationParser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPApp().apply(this);
        outStart(node);
    }

    public void inAApp(AApp node)
    {
        defaultIn(node);
    }

    public void outAApp(AApp node)
    {
        defaultOut(node);
    }

    public void caseAApp(AApp node)
    {
        inAApp(node);
        if(node.getParalist() != null)
        {
            node.getParalist().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAApp(node);
    }

    public void inACommaparalistParalist(ACommaparalistParalist node)
    {
        defaultIn(node);
    }

    public void outACommaparalistParalist(ACommaparalistParalist node)
    {
        defaultOut(node);
    }

    public void caseACommaparalistParalist(ACommaparalistParalist node)
    {
        inACommaparalistParalist(node);
        if(node.getCommaparalist() != null)
        {
            node.getCommaparalist().apply(this);
        }
        outACommaparalistParalist(node);
    }

    public void inACurrparalistParalist(ACurrparalistParalist node)
    {
        defaultIn(node);
    }

    public void outACurrparalistParalist(ACurrparalistParalist node)
    {
        defaultOut(node);
    }

    public void caseACurrparalistParalist(ACurrparalistParalist node)
    {
        inACurrparalistParalist(node);
        if(node.getCurrparalist() != null)
        {
            node.getCurrparalist().apply(this);
        }
        outACurrparalistParalist(node);
    }

    public void inAEmptyParalist(AEmptyParalist node)
    {
        defaultIn(node);
    }

    public void outAEmptyParalist(AEmptyParalist node)
    {
        defaultOut(node);
    }

    public void caseAEmptyParalist(AEmptyParalist node)
    {
        inAEmptyParalist(node);
        outAEmptyParalist(node);
    }

    public void inACommaparalist(ACommaparalist node)
    {
        defaultIn(node);
    }

    public void outACommaparalist(ACommaparalist node)
    {
        defaultOut(node);
    }

    public void caseACommaparalist(ACommaparalist node)
    {
        inACommaparalist(node);
        {
            Object temp[] = node.getSpara().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PSpara) temp[i]).apply(this);
            }
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaparalist(node);
    }

    public void inACurrparalist(ACurrparalist node)
    {
        defaultIn(node);
    }

    public void outACurrparalist(ACurrparalist node)
    {
        defaultOut(node);
    }

    public void caseACurrparalist(ACurrparalist node)
    {
        inACurrparalist(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            Object temp[] = node.getSpara().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PSpara) temp[i]).apply(this);
            }
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACurrparalist(node);
    }

    public void inASpara(ASpara node)
    {
        defaultIn(node);
    }

    public void outASpara(ASpara node)
    {
        defaultOut(node);
    }

    public void caseASpara(ASpara node)
    {
        inASpara(node);
        if(node.getSep() != null)
        {
            node.getSep().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outASpara(node);
    }

    public void inACparaSpara(ACparaSpara node)
    {
        defaultIn(node);
    }

    public void outACparaSpara(ACparaSpara node)
    {
        defaultOut(node);
    }

    public void caseACparaSpara(ACparaSpara node)
    {
        inACparaSpara(node);
        if(node.getCpara() != null)
        {
            node.getCpara().apply(this);
        }
        outACparaSpara(node);
    }

    public void inADparaSpara(ADparaSpara node)
    {
        defaultIn(node);
    }

    public void outADparaSpara(ADparaSpara node)
    {
        defaultOut(node);
    }

    public void caseADparaSpara(ADparaSpara node)
    {
        inADparaSpara(node);
        if(node.getDpara() != null)
        {
            node.getDpara().apply(this);
        }
        outADparaSpara(node);
    }

    public void inAParaSpara(AParaSpara node)
    {
        defaultIn(node);
    }

    public void outAParaSpara(AParaSpara node)
    {
        defaultOut(node);
    }

    public void caseAParaSpara(AParaSpara node)
    {
        inAParaSpara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaSpara(node);
    }

    public void inACpara(ACpara node)
    {
        defaultIn(node);
    }

    public void outACpara(ACpara node)
    {
        defaultOut(node);
    }

    public void caseACpara(ACpara node)
    {
        inACpara(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outACpara(node);
    }

    public void inADpara(ADpara node)
    {
        defaultIn(node);
    }

    public void outADpara(ADpara node)
    {
        defaultOut(node);
    }

    public void caseADpara(ADpara node)
    {
        inADpara(node);
        if(node.getDoublep() != null)
        {
            node.getDoublep().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outADpara(node);
    }

    public void inAStringLitPara(AStringLitPara node)
    {
        defaultIn(node);
    }

    public void outAStringLitPara(AStringLitPara node)
    {
        defaultOut(node);
    }

    public void caseAStringLitPara(AStringLitPara node)
    {
        inAStringLitPara(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringLitPara(node);
    }

    public void inAUrlPara(AUrlPara node)
    {
        defaultIn(node);
    }

    public void outAUrlPara(AUrlPara node)
    {
        defaultOut(node);
    }

    public void caseAUrlPara(AUrlPara node)
    {
        inAUrlPara(node);
        if(node.getUrl() != null)
        {
            node.getUrl().apply(this);
        }
        outAUrlPara(node);
    }

    public void inADialstrPara(ADialstrPara node)
    {
        defaultIn(node);
    }

    public void outADialstrPara(ADialstrPara node)
    {
        defaultOut(node);
    }

    public void caseADialstrPara(ADialstrPara node)
    {
        inADialstrPara(node);
        if(node.getDialstr() != null)
        {
            node.getDialstr().apply(this);
        }
        outADialstrPara(node);
    }

    public void inAPara(APara node)
    {
        defaultIn(node);
    }

    public void outAPara(APara node)
    {
        defaultOut(node);
    }

    public void caseAPara(APara node)
    {
        inAPara(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPara(node);
    }

    public void inANumberPara(ANumberPara node)
    {
        defaultIn(node);
    }

    public void outANumberPara(ANumberPara node)
    {
        defaultOut(node);
    }

    public void caseANumberPara(ANumberPara node)
    {
        inANumberPara(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberPara(node);
    }
}
