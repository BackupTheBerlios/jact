/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.urszeidler.jact.model.applicationParser.analysis;

import java.util.*;
import de.urszeidler.jact.model.applicationParser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAApp(AApp node)
    {
        defaultCase(node);
    }

    public void caseACommaparalistParalist(ACommaparalistParalist node)
    {
        defaultCase(node);
    }

    public void caseACurrparalistParalist(ACurrparalistParalist node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParalist(AEmptyParalist node)
    {
        defaultCase(node);
    }

    public void caseACommaparalist(ACommaparalist node)
    {
        defaultCase(node);
    }

    public void caseACurrparalist(ACurrparalist node)
    {
        defaultCase(node);
    }

    public void caseASpara(ASpara node)
    {
        defaultCase(node);
    }

    public void caseACparaSpara(ACparaSpara node)
    {
        defaultCase(node);
    }

    public void caseADparaSpara(ADparaSpara node)
    {
        defaultCase(node);
    }

    public void caseAParaSpara(AParaSpara node)
    {
        defaultCase(node);
    }

    public void caseACpara(ACpara node)
    {
        defaultCase(node);
    }

    public void caseADpara(ADpara node)
    {
        defaultCase(node);
    }

    public void caseAStringLitPara(AStringLitPara node)
    {
        defaultCase(node);
    }

    public void caseAUrlPara(AUrlPara node)
    {
        defaultCase(node);
    }

    public void caseADialstrPara(ADialstrPara node)
    {
        defaultCase(node);
    }

    public void caseAPara(APara node)
    {
        defaultCase(node);
    }

    public void caseANumberPara(ANumberPara node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTUrl(TUrl node)
    {
        defaultCase(node);
    }

    public void caseTDialstr(TDialstr node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTStringLit(TStringLit node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTROp(TROp node)
    {
        defaultCase(node);
    }

    public void caseTLOp(TLOp node)
    {
        defaultCase(node);
    }

    public void caseTStsep(TStsep node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDoublep(TDoublep node)
    {
        defaultCase(node);
    }

    public void caseTSep(TSep node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
