/*******************************************************************************
 * Copyright (c) 2005 Urs Zeidler
 * This program is free software, distributed under the terms of 
 * the GNU General Public License Version 2. See the LICENSE file 
 * at the top of the source tree.
 * 
 *
 * Contributors:
 *     Urs Zeidler
 *******************************************************************************/
/*
 * (c) urs zeidler
 */
package com.useit.jact.io.indicationsconf;

import com.useit.jact.model.indicationsconf.CustomTone;
import com.useit.jact.model.indicationsconf.Indicationsconf;
import com.useit.jact.model.indicationsconf.ToneDefinitions;

/**
 * <p>
 * ConfWriterImpl
 * </p>
 * Created : 07.08.2005
 * 
 * @author urs
 * @version $Revision: 1.1 $, $Id: ConfWriterImpl.java,v 1.5 2006/01/12 18:03:53
 *          urs Exp $
 */
public class ConfWriterImpl extends ConfWriter {

    /**
     * 
     */
    public ConfWriterImpl() {
        super();
        COMMENTTOK = ";";
        SECHEADERTOK = "[";
        // entryStops =new String[] {"\n","\r"};

        theToneDefinitionswriteHelper = new ToneDefinitionswriteHelper();
        theToneDefinitionswriteHelper.countrycode_StartToken = null;
        theToneDefinitionswriteHelper.countrycode_StopToken = "\n";
        theToneDefinitionswriteHelper.description_StartToken = "description=";
        theToneDefinitionswriteHelper.description_StopToken = "\n";
        theToneDefinitionswriteHelper.alias_StartToken = "alias=";
        theToneDefinitionswriteHelper.alias_StopToken = "\n";
        theToneDefinitionswriteHelper.ringcadence_StartToken = "ringcadence=";
        theToneDefinitionswriteHelper.ringcadence_StopToken = "\n";
        theToneDefinitionswriteHelper.dial_StartToken = "dial=";
        theToneDefinitionswriteHelper.dial_StopToken = "\n";
        theToneDefinitionswriteHelper.busy_StartToken = "busy=";
        theToneDefinitionswriteHelper.busy_StopToken = "\n";
        theToneDefinitionswriteHelper.ring_StartToken = "ring=";
        theToneDefinitionswriteHelper.ring_StopToken = "\n";
        theToneDefinitionswriteHelper.congestion_StartToken = "congestion=";
        theToneDefinitionswriteHelper.congestion_StopToken = "\n";
        theToneDefinitionswriteHelper.callwaiting_StartToken = "callwaiting=";
        theToneDefinitionswriteHelper.callwaiting_StopToken = "\n";
        theToneDefinitionswriteHelper.dialrecall_StartToken = "dialrecall=";
        theToneDefinitionswriteHelper.dialrecall_StopToken = "\n";
        theToneDefinitionswriteHelper.record_StartToken = "record=";
        theToneDefinitionswriteHelper.record_StopToken = "\n";
        theToneDefinitionswriteHelper.info_StartToken = "info=";
        theToneDefinitionswriteHelper.info_StopToken = "\n";

        theIndicationsconfwriteHelper = new IndicationsconfwriteHelper();
        theIndicationsconfwriteHelper.country_StartToken = "country=";
        theIndicationsconfwriteHelper.country_StopToken = "\n";

        theCustomTonewriteHelper = new CustomTonewriteHelper();
        theCustomTonewriteHelper.tonecode_StartToken = "";
        theCustomTonewriteHelper.tonecode_StopToken = "\n";
        theCustomTonewriteHelper.name_StartToken = "";
        theCustomTonewriteHelper.name_StopToken = "=";
    }

    // /**
    // * schreibt die config als datei
    // * @param data
    // * @param string
    // */
    // public void writetoFile(Object data, String string) {
    // // TODO writetoFile(Object data, String string) implentieren
    //
    // }
    //
    // /**
    // * gibt die config als string zurück
    // * @param data
    // */
    // public String writetoString(Object data) {
    // // TODO writetoString(Object data) implementieren
    // return null;
    // }
    @Override
    protected void writeIndicationsconf(StringBuffer strB, Indicationsconf impl) {
        strB.append(";Indications config generated by jact\n");
        writeComment(strB, impl);
        writeSecHeader(strB, ConfReaderImpl.GENERAL);
        super.writeIndicationsconf(strB, impl);
    }

    @Override
    protected void writeToneDefinitions(StringBuffer strB, ToneDefinitions impl) {
        writeEmtypLine(strB);
        writeComment(strB, impl);
        writeSecHeader(strB, impl.getCountrycode());
        super.writeToneDefinitions(strB, impl);
    }

    @Override
    protected void writeCustomToneFields(StringBuffer strB, CustomTone impl) {
        // felder schreiben
        theCustomTonewriteHelper.writename(strB, impl);
        theCustomTonewriteHelper.writetonecode(strB, impl);
    }

}
