/*******************************************************************************
 * Copyright (c) 2005 Urs Zeidler
 * This program is free software, distributed under the terms of 
 * the GNU General Public License Version 2. See the LICENSE file 
 * at the top of the source tree.
 * 
 *
 * Contributors:
 *     Urs Zeidler
 *******************************************************************************/
/*
 * (c) urs zeidler
 */
package com.useit.jact.io.queueconf;

import com.useit.jact.io.iaxconf.ConfReaderImpl;
import com.useit.jact.model.queueconf.Queuegeneral;
import com.useit.jact.model.queueconf.Queuesection;

/**
 * <p>
 * ConfWriterImpl
 * </p>
 * Created : 07.08.2005
 * 
 * @author urs
 * @version $Revision: 1.1 $, $Id: ConfWriterImpl.java,v 1.8 2006/01/14 15:44:47
 *          urs Exp $
 */
public class ConfWriterImpl extends ConfWriter {

    /**
     * 
     */
    public ConfWriterImpl() {
        super();
        theQueuegeneralwriteHelper = new QueuegeneralwriteHelper();
        theQueuegeneralwriteHelper.persistentmembers_StartToken = "persistentmembers=";
        theQueuegeneralwriteHelper.persistentmembers_StopToken = "\n";

        theQueuesectionwriteHelper = new QueuesectionwriteHelper();
        theQueuesectionwriteHelper.musiconhold_StartToken = "musiconhold=";
        theQueuesectionwriteHelper.musiconhold_StopToken = "\n";
        theQueuesectionwriteHelper.announce_StartToken = "announce=";
        theQueuesectionwriteHelper.announce_StopToken = "\n";
        theQueuesectionwriteHelper.strategy_StartToken = "strategy=";
        theQueuesectionwriteHelper.strategy_StopToken = "\n";
        theQueuesectionwriteHelper.servicelevel_StartToken = "servicelevel=";
        theQueuesectionwriteHelper.servicelevel_StopToken = "\n";
        theQueuesectionwriteHelper.context_StartToken = "context=";
        theQueuesectionwriteHelper.context_StopToken = "\n";
        theQueuesectionwriteHelper.timeout_StartToken = "timeout=";
        theQueuesectionwriteHelper.timeout_StopToken = "\n";
        theQueuesectionwriteHelper.retry_StartToken = "retry=";
        theQueuesectionwriteHelper.retry_StopToken = "\n";
        theQueuesectionwriteHelper.weight_StartToken = "weight=";
        theQueuesectionwriteHelper.weight_StopToken = "\n";
        theQueuesectionwriteHelper.wrapuptime_StartToken = "wrapuptime=";
        theQueuesectionwriteHelper.wrapuptime_StopToken = "\n";
        theQueuesectionwriteHelper.maxlen_StartToken = "maxlen=";
        theQueuesectionwriteHelper.maxlen_StopToken = "\n";
        theQueuesectionwriteHelper.announcefrequency_StartToken = "announcefrequency=";
        theQueuesectionwriteHelper.announcefrequency_StopToken = "\n";
        theQueuesectionwriteHelper.announceholdtime_StartToken = "announceholdtime=";
        theQueuesectionwriteHelper.announceholdtime_StopToken = "\n";
        theQueuesectionwriteHelper.announceroundseconds_StartToken = "announceroundseconds=";
        theQueuesectionwriteHelper.announceroundseconds_StopToken = "\n";
        theQueuesectionwriteHelper.monitorformat_StartToken = "monitorformat=";
        theQueuesectionwriteHelper.monitorformat_StopToken = "\n";
        theQueuesectionwriteHelper.monitorjoin_StartToken = "monitorjoin=";
        theQueuesectionwriteHelper.monitorjoin_StopToken = "\n";
        theQueuesectionwriteHelper.joinempty_StartToken = "joinempty=";
        theQueuesectionwriteHelper.joinempty_StopToken = "\n";
        theQueuesectionwriteHelper.leavewhenempty_StartToken = "leavewhenempty=";
        theQueuesectionwriteHelper.leavewhenempty_StopToken = "\n";
        theQueuesectionwriteHelper.eventwhencalled_StartToken = "eventwhencalled=";
        theQueuesectionwriteHelper.eventwhencalled_StopToken = "\n";
        theQueuesectionwriteHelper.eventmemberstatusoff_StartToken = "eventmemberstatusoff=";
        theQueuesectionwriteHelper.eventmemberstatusoff_StopToken = "\n";
        theQueuesectionwriteHelper.reportholdtime_StartToken = "reportholdtime=";
        theQueuesectionwriteHelper.reportholdtime_StopToken = "\n";
        theQueuesectionwriteHelper.memberdelay_StartToken = "memberdelay=";
        theQueuesectionwriteHelper.memberdelay_StopToken = "\n";
        theQueuesectionwriteHelper.timeoutrestart_StartToken = "timeoutrestart=";
        theQueuesectionwriteHelper.timeoutrestart_StopToken = "\n";

        theQueuememberwriteHelper = new QueuememberwriteHelper();
        theQueuememberwriteHelper.tech_StartToken = "member => ";
        theQueuememberwriteHelper.tech_StopToken = "";
        theQueuememberwriteHelper.dialstring_StartToken = "/";
        theQueuememberwriteHelper.dialstring_StopToken = "\n";

    }

    @Override
    protected void writeQueuegeneral(StringBuffer strB, Queuegeneral impl) {
        strB.append(";queue Config config generated by jact\n");
        writeComment(strB, impl);
        writeSecHeader(strB, ConfReaderImpl.GENERAL);

        super.writeQueuegeneral(strB, impl);
    }

    @Override
    protected void writeQueuesection(StringBuffer strB, Queuesection impl) {
        writeEmtypLine(strB);
        writeComment(strB, impl);
        writeSecHeader(strB, impl.getSectionname());

        super.writeQueuesection(strB, impl);

    }
    // /**
    // * schreibt die config als datei
    // * @param data
    // * @param string
    // */
    // public void writetoFile(Object data, String string) {
    // // TODO writetoFile(Object data, String string) implentieren
    //
    // }
    //
    // /**
    // * gibt die config als string zurück
    // * @param data
    // */
    // public String writetoString(Object data) {
    // // TODO writetoString(Object data) implementieren
    // return null;
    // }

}
