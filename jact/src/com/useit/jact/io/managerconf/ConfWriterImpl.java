/*
 * (c) urs zeidler
 */
package com.useit.jact.io.managerconf;

import java.util.Iterator;

import org.apache.log4j.Logger;

import com.useit.jact.model.managerconf.ManagerSection;
import com.useit.jact.model.managerconf.Managerdeny;
import com.useit.jact.model.managerconf.ManagergeneralSection;
import com.useit.jact.model.managerconf.Managerpermit;

/**
 * <p>
 * ConfWriterImpl
 * </p>
 * Created : 07.08.2005
 * 
 * @author urs
 * @version $Revision: 1.1 $, $Id: ConfWriterImpl.java,v 1.7 2006/01/14 15:00:13
 *          urs Exp $
 */
public class ConfWriterImpl extends ConfWriter {
    /**
     * Logger for this class
     */
    private static final Logger LOGGER = Logger.getLogger(ConfWriterImpl.class);

    /**
     * 
     */
    public ConfWriterImpl() {
        super();
        COMMENTTOK = ";";
        // TODO: die tokens anpassen
        theManagergeneralSectionwriteHelper = new ManagergeneralSectionwriteHelper();
        theManagergeneralSectionwriteHelper.generalid_StartToken = null;
        theManagergeneralSectionwriteHelper.generalid_StopToken = "\n";
        theManagergeneralSectionwriteHelper.enabled_StartToken = "enabled=";
        theManagergeneralSectionwriteHelper.enabled_StopToken = "\n";
        theManagergeneralSectionwriteHelper.portno_StartToken = "portno=";
        theManagergeneralSectionwriteHelper.portno_StopToken = "\n";
        theManagergeneralSectionwriteHelper.bindaddr_StartToken = "bindaddr=";
        theManagergeneralSectionwriteHelper.bindaddr_StopToken = "\n";
        theManagergeneralSectionwriteHelper.port_StartToken = "port=";
        theManagergeneralSectionwriteHelper.port_StopToken = "\n";
        theManagergeneralSectionwriteHelper.fileid_StartToken = null;
        theManagergeneralSectionwriteHelper.fileid_StopToken = "\n";

        theManagerdenywriteHelper = new ManagerdenywriteHelper();
        theManagerdenywriteHelper.value_StartToken = "value=";
        theManagerdenywriteHelper.value_StopToken = "\n";

        theManagerSectionwriteHelper = new ManagerSectionwriteHelper();
        theManagerSectionwriteHelper.username_StartToken = null;
        theManagerSectionwriteHelper.username_StopToken = "\n";
        theManagerSectionwriteHelper.secret_StartToken = "secret=";
        theManagerSectionwriteHelper.secret_StopToken = "\n";
        theManagerSectionwriteHelper.read_StartToken = "read=";
        theManagerSectionwriteHelper.read_StopToken = "\n";
        theManagerSectionwriteHelper.write_StartToken = "write=";
        theManagerSectionwriteHelper.write_StopToken = "\n";

        theManagerpermitwriteHelper = new ManagerpermitwriteHelper();
        theManagerpermitwriteHelper.value_StartToken = "value=";
        theManagerpermitwriteHelper.value_StopToken = "\n";
    }

    /**
     * schreibt ein ManagergeneralSection Objekt
     * 
     * @param strB
     * @param msec
     */
    protected void writeManagergeneralSection(StringBuffer strB,
            ManagergeneralSection impl) {
        strB.append(";Mananger config generated by jact\n");
        writeComment(strB, impl);
        writeSecHeader(strB, ConfReaderImpl.GENERAL);
        super.writeManagergeneralSection(strB, impl);

    }

    /**
     * schreibt ein Managerdeny Objekt
     * 
     * @param strB
     * @param msec
     */
    protected void writeManagerdeny(StringBuffer strB, Managerdeny impl) {
        super.writeManagerdeny(strB, impl);

    }

    /**
     * schreibt ein ManagerSection Objekt
     * 
     * @param strB
     * @param msec
     */
    protected void writeManagerSection(StringBuffer strB, ManagerSection impl) {
        writeEmtypLine(strB);
        writeComment(strB, impl);
        writeSecHeader(strB, impl.getUsername());
        super.writeManagerSection(strB, impl);

    }

    @Override
    protected void writeManagerSectionAggregates(StringBuffer strB,
            ManagerSection impl) {

        strB.append("deny=");
        // aggregate schreiben
        // maps schreiben
        // ManagerdenyMap
        for (Iterator iter = impl.getManagerdenyMap().iterator(); iter
                .hasNext();) {
            Managerdeny mobj = (Managerdeny) iter.next();
            strB.append(mobj.getValue());
            if (iter.hasNext())
                strB.append(",");
        }

        writeEmtypLine(strB);
        strB.append("permit=");
        // ManagerpermitMap
        for (Iterator iter = impl.getManagerpermitMap().iterator(); iter
                .hasNext();) {
            Managerpermit mobj = (Managerpermit) iter.next();
            strB.append(mobj.getValue());
            if (iter.hasNext())
                strB.append(",");
        }
    }

    /**
     * schreibt ein Managerpermit Objekt
     * 
     * @param strB
     * @param msec
     */
    protected void writeManagerpermit(StringBuffer strB, Managerpermit impl) {
        super.writeManagerpermit(strB, impl);

    }

}
