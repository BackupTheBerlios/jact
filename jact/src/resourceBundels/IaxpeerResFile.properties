
resStr_Iaxpeer=Iaxpeer
resStr_IaxpeerDesc= Further user sections may be added, specifying a context and a secret used for connections with that given authentication name. Limited IP based access control is allowed by use of "allow" and "deny" keywords.  Multiple rules are permitted.  Multiple permitted contexts may be specified, in which case the first will be the default. You can also override caller*ID so that when you receive a call you set the Caller*ID to be what you want instead of trusting what the remote user provides There are three authentication methods that are supported:  md5, plaintext, and rsa.  The least secure is "plaintext", which sends passwords cleartext across the net.  "md5" uses a challenge/response md5 sum arrangement, but still requires both ends have plain text access to the secret.  "rsa" allows unidirectional secret knowledge through public/private keys.  If "rsa" authentication is used, "inkeys" is a list of acceptable public keys on the  local system that can be used to authenticate the remote peer, separated by the ":" character.  "outkey" is a single, private key to use to authenticate to the other side.  Public keys are named /var/lib/asterisk/keys/<name>.pub while private keys are named /var/lib/asterisk/keys/<name>.key.  Private keys should always be 3DES encrypted.

FormTitel = Iaxpeer bearbeiten
FormDesc =  Further user sections may be added, specifying a context and a secret used for connections with that given authentication name. Limited IP based access control is allowed by use of "allow" and "deny" keywords.  Multiple rules are permitted.  Multiple permitted contexts may be specified, in which case the first will be the default. You can also override caller*ID so that when you receive a call you set the Caller*ID to be what you want instead of trusting what the remote user provides There are three authentication methods that are supported:  md5, plaintext, and rsa.  The least secure is "plaintext", which sends passwords cleartext across the net.  "md5" uses a challenge/response md5 sum arrangement, but still requires both ends have plain text access to the secret.  "rsa" allows unidirectional secret knowledge through public/private keys.  If "rsa" authentication is used, "inkeys" is a list of acceptable public keys on the  local system that can be used to authenticate the remote peer, separated by the ":" character.  "outkey" is a single, private key to use to authenticate to the other side.  Public keys are named /var/lib/asterisk/keys/<name>.pub while private keys are named /var/lib/asterisk/keys/<name>.key.  Private keys should always be 3DES encrypted.
imageUrl = /icons/Iaxpeer48.png

res_striaxpeername=iaxpeername
res_striaxpeernameDescription= The peer name.
res_striaxpeernameDisplayName= iaxpeername
res_strpeertype=peertype
res_strpeertypeDescription=  [user|peer|friend]: This line tells Asterisk how to interpret this entity. Users are things
res_strpeertypeDisplayName= peertype
res_strcallerid=callerid
res_strcalleridDescription= <callerid>: You may override the Caller*ID information passed by a user to you (if they choose to send it) in order that it always be accurate from the perspective of your server.
res_strcalleridDisplayName= callerid
res_strauth=auth
res_strauthDescription=  [md5|plaintext|rsa]: You may select which authentication methods are permitted to be used by the user to authenticate to us. Multiple methods may be specified, separated by commas. If md5 or plaintext authentication is selected, a secret must be provided. If RSA authentication is specified, then one or more key names must be specifed with "inkeys" If no secret is specified and no authentication method is specified, then no authentication will be required.
res_strauthDisplayName= auth
res_strsecret=secret
res_strsecretDescription= <secret>: The "secret" line specifies the shared secret for md5 and plaintext authentication methods. It is never suggested to use plaintext except in some cases for debugging.
res_strsecretDisplayName= secret
res_strinkeys=inkeys
res_strinkeysDescription=  key1[:key2...]: The "inkeys" line specifies which keys we can use to authenticate the remote peer. If the peer's challenge passes with any of the given keys, then we accept its authentication. The key files live in /var/lib/asterisk/keys/<name>.pub and are *public keys*. Public keys are not typically DES3 encrypted and thus do not usually need initialization.
res_strinkeysDisplayName= inkeys
res_strhost=host
res_strhostDescription= Sets the expected outgoing host for this client. Can be set to an ip address or dynamic, which will allow incoming connections from any host (that is not explicitly denied.)
res_strhostDisplayName= host
res_strdefaultip=defaultip
res_strdefaultipDescription= The default IP address for an IAX client. This field is consulted if Asterisk receives a call for an IAX client that is dynamic and has not registered to let Asterisk know the current IP address. Takes as itís argument an IP address.
res_strdefaultipDisplayName= defaultip
res_strcontext=context
res_strcontextDescription= When used within a client definition, this keyword overrides the default incoming context set in the general section for the user only.
res_strcontextDisplayName= context
res_strdbsecret=dbsecret
res_strdbsecretDescription= Secrets can be stored in astdb, too (mysecrets/place)
res_strdbsecretDisplayName= dbsecret
res_strsetvar=setvar
res_strsetvarDescription= 
res_strsetvarDisplayName= setvar
res_strpeercontext=peercontext
res_strpeercontextDescription= Default context to request for calls to peer
res_strpeercontextDisplayName= peercontext
res_strqualify=qualify
res_strqualifyDescription= Tells Asterisk whether to test whether the peer is alive before attempting to connect the call. If set to yes Asterisk will periodically contact the peer before forwarding any call information. The argument specified is the maximum number of milliseconds that a peer can take to respond before it is considered unavailable.
res_strqualifyDisplayName= qualify
res_strtrunk=trunk
res_strtrunkDescription= Enables or disables trunking for a given user or peer. Trunk mode is a more efficient method of operating IAX if there are typically many calls running on the link. Trunk mode requires having a Zaptel interface in the Asterisk server.
res_strtrunkDisplayName= trunk
res_strtimezone=timezone
res_strtimezoneDescription= Set a timezone for the date/time IE
res_strtimezoneDisplayName= timezone
res_strregexten=regexten
res_strregextenDescription= 
res_strregextenDisplayName= regexten
res_strdisallow=disallow
res_strdisallowDescription= all :Disallow all codecs (global configuration)
res_strdisallowDisplayName= disallow
res_strallow=allow
res_strallowDescription= Allow codecs in order of preference (Use DISALLOW=ALL first, before allowing other codecs)
res_strallowDisplayName= allow
res_strmailbox=mailbox
res_strmailboxDescription= Provides a mailbox to associate with a given peer, so that when it registers it can be notified of any pending messages waiting.
res_strmailboxDisplayName= mailbox
res_straccountcode=accountcode
res_straccountcodeDescription= When used within a client definition, sets the account code for that client only. This is used by the call logging service.
res_straccountcodeDisplayName= accountcode
res_stroutkey=outkey
res_stroutkeyDescription= The private key to encrypt outgoing authentication communication for this client.
res_stroutkeyDisplayName= outkey
res_strnotransfer=notransfer
res_strnotransferDescription= Disable IAX native transfer.
res_strnotransferDisplayName= notransfer
res_strqualifysmoothing=qualifysmoothing
res_strqualifysmoothingDescription= use an average of the last two PONG results to reduce falsly detected LAGGED hosts Default: Off
res_strqualifysmoothingDisplayName= qualifysmoothing
res_strqualifyfreqok=qualifyfreqok
res_strqualifyfreqokDescription= how frequently to ping the peer when everything seems to be ok, in milliseconds
res_strqualifyfreqokDisplayName= qualifyfreqok
res_strqualifyfreqnotok=qualifyfreqnotok
res_strqualifyfreqnotokDescription= how frequently to ping the peer when it's either LAGGED or UNAVAILABLE, in milliseconds
res_strqualifyfreqnotokDisplayName= qualifyfreqnotok

