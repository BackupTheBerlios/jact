
resStr_Analog_Trunk_Features=Analog_Trunk_Features
resStr_Analog_Trunk_FeaturesDesc=analog features

FormTitel = Analog_Trunk_Features bearbeiten
FormDesc = analog features
imageUrl = /icons/Analog_Trunk_Features48.png

res_strusedistinctiveringdetection=usedistinctiveringdetection
res_strusedistinctiveringdetectionDescription= Whether or not to attempt to recognize distinctive ring styles on incoming calls. This does not require audio analyisis because rings are simple transitions of the analog line. It's merely a matter of matching the transition pattern. Default no.    usedistinctiveringdetection=yes
res_strusedistinctiveringdetectionDisplayName= usedistinctiveringdetection
res_strdring1=dring1
res_strdring1Description= If you set usedistinctiveringdetection=yes, then you may define up to three different distinctive ring styles for Asterisk to attempt to recognize. Each style is defined as a comma separated list of up to three integers. Nobody has yet documented what these numbers mean, so you're on your own when it comes to trying to figure out what numbers to use for the distinctive ring syles used by your phone company in your country. But the tip is to use the Asterisk console in verbose mode, and apparently it reports numbers describing the ring patterns it sees. These patterns may be a starting point:
res_strdring1DisplayName= dring1
res_strdring2=dring2
res_strdring2Description= see 1
res_strdring2DisplayName= dring2
res_strdring3=dring3
res_strdring3Description= see 2
res_strdring3DisplayName= dring3
res_strdring1context=dring1context
res_strdring1contextDescription= Along with setting up to three distinctive ring patterns with dring1, dring2 and dring3, you also set corresponding contexts for incoming calls matching those distinctive ring patterns to jump into. If an incoming call does not match any of the distinctive ring patterns defined, then of course it will enter Asterisk with the default context defined for this channel.
res_strdring1contextDisplayName= dring1context
res_strdring2context=dring2context
res_strdring2contextDescription= see 1
res_strdring2contextDisplayName= dring2context
res_strdring3context=dring3context
res_strdring3contextDescription= see 1 too
res_strdring3contextDisplayName= dring3context
res_strbusydetect=busydetect
res_strbusydetectDescription= If enabled, Asterisk will analyze the audio coming in on the line during a call or a dial attempt to attempt to recognize busy signals. This is useful on analog trunk interfaces both to detect a busy signal when dialing out, and for detecting when the person has hung up. See also Disconnect Supervision. Be sure that you don't use this on digital interfaces like QuadBri cards and so on. Otherwise you will run in "broken calls" problems. default=no    busydetect=yes
res_strbusydetectDisplayName= busydetect
res_strbusycount=busycount
res_strbusycountDescription= This option requires busydetect=yes. You can specify how many busy tones to wait before hanging up. The default is 3, but better results can be achieved if set to 6 or even 8. The higher the number, the more time is needed to detect a disconnected channel, but the lower the probability mistaking some other sound as being a busy tone.   busycount=5
res_strbusycountDisplayName= busycount
res_strcallprogress=callprogress
res_strcallprogressDescription= Asterisk can attempt to monitor the state of the call to listen for a ringing tone, busy tone, congestion tone, and sounds indicating that the line has been answered. It appears that this feature is independent of the busydetect feature; it seems that both can run in parallel, and both will independently attempt to recognize a busy tone. The callprogress feature is highly experimental and can easily detect false answers, so don't count on it being very accurate. Also, it is currently configured only for standard U.S. phone tones. Default no.   callprogress = yes
res_strcallprogressDisplayName= callprogress
res_strpulse=pulse
res_strpulseDescription= The standard installation of Asterisk does not permit you to specify that a Zaptel device use pulse dialing, even though the Zaptel driver supports pulse dialing. But you can apply a patch file to enable you to specify pulse dialing with the pulse keyword. See Pulse Dialing on Zap Channels for the patch.    pulse=yes
res_strpulseDisplayName= pulse

