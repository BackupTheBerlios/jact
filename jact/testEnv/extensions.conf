;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your 
; inbound and outbound calls in Asterisk. 
; 

;
; The "General" category is for certain variables.  
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens. 
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command 'save dialplan' too
;
writeprotect=yes

; You can include other config files, use the #include command (without the ';')
; Note that this is different from the "include" command that includes contexts within 
; other contexts. The #include command works in all asterisk configuration files.
#include "mainmenue.conf"

; The "Globals" category contains global variables that can be referenced
; in the dialplan with ${VARIABLE} or ${ENV(VARIABLE)} for Environmental variable
; ${${VARIABLE}} or ${text${VARIABLE}} or any hybrid
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=Zap/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=Zap/g2					; Trunk interface
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;-------------------------
;--------  meine variablen
BERONETOUT=IAX2/ursi:urs123@62.180.50.212
BEROBUERO=IAX2/ursi:urs123@beronet.dynalias.org
INCOMING=Zap/1
URSIAX=IAX2/urs:urs@192.168.10.110
URSSIP=SIP/urs
GRANDSTREAM=SIP/grandstream
TESTDIAL=SIP/urs&SIP/110&SIP/111

;
; Any category other than "General" and "Globals" represent 
; extension contexts, which are collections of extensions.  
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches 
;	anything starting with 9011 excluding 9011 itself)
;
; For example the extension _NXXXXXX would match normal 7 digit dialings, 
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceeded by a one.
;
; Contexts contain several lines, one for each step of each
; extension, which can take one of two forms as listed below,
; with the first form being preferred.  One may include another
; context in the current one as well, optionally with a
; date and time.  Included contexts are included in the order
; they are listed.
;
;[context]
;exten => someexten,priority,application(arg1,arg2,...)
;exten => someexten,priority,application,arg1|arg2...
;
; Timing list for includes is 
;
;   <time range>|<days of week>|<days of month>|<months>
;
;include => daytime|9:00-17:00|mon-fri|*|*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon
; receipt of a particular pattern.  The most commonly used example is
; of course '9' like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.
;
;---------------------------------------------------------
;----- homezone ----
[homezone]
;100 mein zip anschluß
exten => 100,1,Dial(SIP/urs,20,tr)

;mit 200 zu patrick sip anschluß
exten => 200,1,Dial(SIP/pat,20,tr)

include => sip

[intern]
include => sip

[internisdn]

exten => 11,1,voicemailmain,b2000
exten => X_.,1,voicemailmain,u2000
;include => sip


[sip]
;sip wählt mit null das amt
exten => 0,1,Dial(Zap/1,20,tr)

exten =>00X_.,1,Dial(IAX/urstester)

;mit 1 zu urs
exten => 1,1,Dial(SIP/urs,35,tr)
exten => 1,2,Goto(standartbeantworter,s,1)
;exten =>00X_.,1,Dial(IAX/urstester/11,20,tr)

;mit 2 zu patrick sip anschluß
exten => 2,1,Dial(SIP/pat,10,tr)
exten => 2,2,Voicemail,u10

exten => 1000,1,Dial(SIP/urs,20,tr)

exten => 50,1,Dial(IAX/elmschenhagen.dyndns.org/test,20,tr)
exten => 500,1,agi(agi://192.168.10.1)
exten => 501,1,Dial(mISDN/1/11)
exten => 502,1,echo
exten => 503,1,playback('tt-monkeys')
;exten = 
;grandstream einstellungen

exten => 39,1,Dial(${GRANDSTREAM}/${EXTEN},20,tr)
exten => 39,2,VoiceMail,u2000

exten => 2000,1,VoiceMailMain,s200
exten => 300,1,VoiceMailMain,s300

exten => 10,1,VoiceMail,u9999

exten => 1001,1,Ringing
exten => 1001,2,Wait(2)
exten => 1001,3,VoicemailMain,s200

;test destinationen
exten => _004930X.,1,Dial(SIP/urs,200,tr)
;exten => _00X.,1,Dial(SIP/urs,200,tr)
;---------   
exten => _01X.,1,Goto(callshop,${EXTEN},1)



;----- beronet im büro
;gürsel
exten => 45,1,Dial(${BEROBUERO}/${EXTEN},35,tr)
;thomas
exten => 30,1,Dial(${BEROBUERO}/${EXTEN},35,tr)
;ip raus
exten => _9X.,1,Dial(${BEROBUERO}/${EXTEN},35,tr)

;[iaxout]
;exten => _9X,1,Dial(IAX2/ursi:urs123@62.180.50.212/${EXTEN})

;include => homezone
;include => demo

[incoming]
;exten => s,1,Echo ;for testing the connection
;exten => s,1,Playback,demo-thanks ;for playing a file
exten => s,1,Dial(${GRANDSTREAM}&${URSSIP},35,tr)
exten => s,2,Goto(standartbeantworter,s,1)
exten => t,1,Hangup


[callshop]
;exten => _01X.,1,SetCallerID(${EXTEN})
;exten => _01X.,2,Dial(${TESTDIAL},200,tTr)

;exten => _01X.,1,Echo
;exten => _02X.,1,VoicemailMain,s2000


exten => _X.,1,Wait(1)
exten => _X.,2,Answer
exten => _X.,3,Echo

exten => _00X.,1,Wait(1)
exten => _00X.,2,Answer
exten => _00X.,3,Echo

exten => _04X.,1,Queue(default) 


[default]
include => sip
include => homezone

;Error handler
exten => s,1,Playback(invalid)          ; "That's not valid, try again"


;
; By default we include the demo.  In a production system, you 
; probably don't want to have the demo there.
;
;include => demo

;
; Extensions like the two below can be used for FWD, Nikotel, sipgate etc.
; Note that you must have a [sipprovider] section in sip.conf whereas
; the otherprovider.net example does not require such a peer definition
;
;exten => _41X.,1,Dial(SIP/${EXTEN:2}@sipprovider,,r)
;exten => _42X.,1,Dial(SIP/user:passwd@${EXTEN:2}@otherprovider.net,30,rT)

; Real extensions would go here. Generally you want real extensions to be 4 or 5
; digits long (although there is no such requirement) and start with a single
; digit that is fairly large (like 6 or 7) so that you have plenty of room to
; overlap extensions and menu options without conflict.  You can alias them with
; names, too and use global variables

;exten => 6245,1,Dial(SIP/Grandstream1,20,rt)	; permit transfer
;exten => 6245,1,Dial(SIP/Grandstream1&SIP/Xlite1,20,rtT)
;exten => 6361,1,Dial(IAX2/JaneDoe,,rm)		; ring without time limit
;exten => 6389,1,Dial(MGCP/aaln/1@192.168.0.14)
;exten => 6394,1,Dial(Local/6275/n)		; this will dial ${MARK}

;exten => 6275,1,Macro(stdexten,6275,${MARK})	; assuming ${MARK} is something like Zap/2
;exten => mark,1,Goto(6275|1)			; alias mark to 6275
;exten => 6536,1,Macro(stdexten,6236,${WIL})	; Ditto for wil
;exten => wil,1,Goto(6236|1)
;
; Some other handy things are an extension for checking voicemail via
; voicemailmain
;
;exten => 8500,1,VoicemailMain
;exten => 8500,2,Hangup
;
; Or a conference room (you'll need to edit meetme.conf to enable this room)
;
;exten => 8600,1,Meetme(1234)
;
; Or playing an announcement to the called party, as soon it answers
;
;exten = 8700,1,Dial(${MARK},30,A(/path/to/my/announcemsg))
;
; For more information on applications, just type "show applications" at your
; friendly Asterisk CLI prompt.
;
; 'show application <command>' will show details of how you
; use that particular application in this file, the dial plan. 
;


[local]
;
; Master context for local, toll-free, and iaxtel calls only
;
ignorepat => 9
include => default
;include => parkedcalls
;include => trunklocal
;include => iaxtel700
;include => trunktollfree
;include => iaxprovider
;include => iaxout
;include => sip




;----------------------------
;
; Here are the entries you need to participate in the IAXTEL
; call routing system.  Most IAXTEL numbers begin with 1-700, but
; there are exceptions.  For more information, and to sign
; up, please go to www.gnophone.com or www.iaxtel.com
;
[iaxtel700]
;exten => _91700XXXXXXX,1,Dial(IAX2/${IAXINFO}@iaxtel.com/${EXTEN:1}@iaxtel)

;
; The SWITCH statement permits a server to share the dialplain with
; another server. Use with care: Reciprocal switch statements are not - Device(s) to ring
;
exten => s,1,Dial(${ARG2},20)					; Ring the interface, 20 seconds maximum
exten => s,2,Voicemail(u${ARG1})				; If unavailable, send to voicemail w/ unavail announce
exten => s,3,Goto(default,s,1)					; If they press #, return to start
exten => s,102,Voicemail(b${ARG1})				; If busy, send to voicemail w/ busy announce
exten => s,103,Goto(default,s,1)				; If they press #, return to start


[demo]
;
; We start with what to do when a call first comes in.
;
exten => s,1,Wait,1			; Wait a second, just for fun
exten => s,2,Answer			; Answer the line
exten => s,3,DigitTimeout,5		; Set Digit Timeout to 5 seconds
exten => s,4,ResponseTimeout,10		; Set Response Timeout to 10 seconds
exten => s,5,BackGround(demo-congrats)	; Play a congratulatory message
exten => s,6,BackGround(demo-instruct)	; Play some instructions

exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
exten => 2,2,Goto(s,6)

exten => 3,1,SetLanguage(fr)		; Set language to french
exten => 3,2,Goto(s,5)			; Start with the congratulations

exten => 1000,1,Goto(default,s,1)
;
; We also create an example user, 1234, who is on the console and has
; voicemail, etc.
;
exten => 1234,1,Playback(transfer,skip)		; "Please hold while..." 
					; (but skip if channel is not up)
exten => 1234,2,Macro(stdexten,1234,${CONSOLE})

exten => 1235,1,Voicemail(u1234)		; Right to voicemail

exten => 1236,1,Dial(Console/dsp)		; Ring forever
exten => 1236,2,Voicemail(u1234)		; Unless busy

;
; # for when they're done with the demo
;
exten => #,1,Playback(demo-thanks)		; "Thanks for trying the demo"
exten => #,2,Hangup			; Hang them up.

;
; A timeout and "invalid extension rule"
;
exten => t,1,Goto(#,1)			; If they take too long, give up
exten => i,1,Playback(invalid)		; "That's not valid, try again"

;
; Create an extension, 500, for dialing the
; Asterisk demo.
;
exten => 500,1,Playback(demo-abouttotry); Let them know what's going on
exten => 500,2,Dial(IAX2/guest@misery.digium.com/s@default)	; Call the Asterisk demo
exten => 500,3,Playback(demo-nogo)	; Couldn't connect to the demo site
exten => 500,4,Goto(s,6)		; Return to the start over message.

;
; Create an extension, 600, for evaulating echo latency.
;
exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
exten => 600,2,Echo			; Do the echo test
exten => 600,3,Playback(demo-echodone)	; Let them know it's over
exten => 600,4,Goto(s,6)		; Start over

;
; Give voicemail at extension 8500
;
exten => 8500,1,VoicemailMain
exten => 8500,2,Goto(s,6)
;
; Here's what a phone entry would look like (IXJ for example)
;
;exten => 1265,1,Dial(Phone/phone0,15)
;exten => 1265,2,Goto(s,5)

;[mainmenu]
;
; Example "main menu" context with submenu
;
;exten => s,1,Answer
;exten => s,2,Background(thanks)		; "Thanks for calling press 1 for sales, 2 for support, ..."
;exten => 1,1,Goto(submenu,s,1)
;exten => 2,1,Hangup
;include => default
;
;[submenu]
;exten => s,1,Ringing					; Make them comfortable with 2 seconds of ringback
;exten => s,2,Wait,2
;exten => s,3,Background(submenuopts)	; "Thanks for calling the sales department.  Press 1 for steve, 2 for..."
;exten => 1,1,Goto(default,steve,1)
;exten => 2,1,Goto(default,mark,2)


